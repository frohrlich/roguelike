import { EffectOverTime } from "../classes/battle/EffectOverTime";
import { Spell } from "../classes/battle/Spell";

/** This service contains the data for all available spells in the game. */
export class SpellService {
  static effectsOverTime: { [key: string]: EffectOverTime } = {
    Poison: new EffectOverTime("Poison", 58, 2, 10, 1, 1, 0, 0, 0),
    "Wasp venom": new EffectOverTime("Wasp venom", 58, 2, 10, 1, 1, 0, 0, 0),
    Plague: new EffectOverTime("Plague", 59, 2, 25, 2, 2, 0, 0, 0),
  };

  static spells: { [key: string]: Spell } = {
    "Deadly javelin": new Spell(
      56,
      1,
      5,
      4,
      "Deadly javelin",
      true,
      true,
      25,
      0,
      2,
      0,
      0,
      0,
      "line",
      3,
      0,
      this.effectsOverTime["Poison"],
      null,
      3
    ),
    "Weighted net": new Spell(
      104,
      3,
      8,
      4,
      "Weighted net",
      true,
      false,
      15,
      2,
      0,
      0,
      0,
      0,
      "star",
      1
    ),
    Trident: new Spell(
      116,
      2,
      4,
      2,
      "Trident",
      true,
      true,
      20,
      0,
      0,
      0,
      0,
      0,
      "line",
      1,
      1,
      null,
      null,
      -3
    ),
    Stargazing: new Spell(
      128,
      0,
      0,
      0,
      "Stargazing",
      true,
      false,
      0,
      0,
      0,
      0,
      3,
      3,
      "monoTarget",
      0,
      2
    ),
    Revelation: new Spell(
      140,
      0,
      6,
      4,
      "Revelation",
      false,
      false,
      0,
      4,
      4,
      25,
      0,
      0,
      "monoTarget",
      0,
      1
    ),
    Plague: new Spell(
      152,
      0,
      5,
      3,
      "Plague",
      true,
      false,
      0,
      0,
      0,
      0,
      0,
      0,
      "monoTarget",
      0,
      0,
      this.effectsOverTime["Plague"],
      null,
      0
    ),
    Punch: new Spell(68, 1, 1, 4, "Punch", true, false, 50),
    // DEV
    // Sting: new Spell(
    //   80,
    //   0,
    //   30,
    //   0,
    //   "Sting",
    //   false,
    //   false,
    //   100,
    //   0,
    //   1,
    //   0,
    //   0,
    //   0,
    //   "monoTarget",
    //   0,
    //   0,
    //   null
    // ),
    // PROD
    Sting: new Spell(
      80,
      0,
      12,
      2,
      "Sting",
      true,
      false,
      150,
      0,
      1,
      0,
      0,
      0,
      "monoTarget",
      0,
      1
    ),
    // DEV
    // "Herbal medicine": new Spell(
    //   92,
    //   0,
    //   4,
    //   0,
    //   "Herbal medicine",
    //   true,
    //   false,
    //   0,
    //   0,
    //   0,
    //   20,
    //   1,
    //   1,
    //   "star",
    //   2,
    //   0,
    //   null,
    //   UnitService.units["Princess"]
    // ),
    // PROD
    "Herbal medicine": new Spell(
      92,
      0,
      4,
      4,
      "Herbal medicine",
      true,
      false,
      0,
      0,
      0,
      20,
      1,
      1,
      "star",
      2,
      2
    ),
    Biting: new Spell(
      0,
      1,
      1,
      4,
      "Biting",
      true,
      false,
      30,
      0,
      0,
      0,
      0,
      0,
      "monoTarget"
    ),
    "Wasp sting": new Spell(
      0,
      1,
      1,
      4,
      "Wasp sting",
      true,
      false,
      15,
      0,
      0,
      0,
      0,
      0,
      "monoTarget",
      1,
      0,
      this.effectsOverTime["Wasp venom"]
    ),
    "Light arrow": new Spell(
      57,
      6,
      16,
      3,
      "Light arrow",
      true,
      false,
      8,
      0,
      0,
      0,
      0,
      0,
      "monoTarget",
      0
    ),
    "Heavy arrow": new Spell(
      69,
      4,
      5,
      5,
      "Heavy arrow",
      true,
      true,
      40,
      1,
      0,
      0,
      0,
      0,
      "monoTarget",
      0,
      0,
      null,
      null,
      1
    ),
    "Poisoned arrow": new Spell(
      81,
      3,
      8,
      3,
      "Poisoned arrow",
      true,
      false,
      15,
      0,
      0,
      0,
      0,
      0,
      "monoTarget",
      0,
      0,
      this.effectsOverTime["Poison"]
    ),
    Bone: new Spell(
      93,
      0,
      0,
      3,
      "Bone",
      false,
      false,
      0,
      0,
      0,
      30,
      0,
      0,
      "monoTarget",
      0,
      2
    ),
    Bite: new Spell(
      105,
      1,
      1,
      3,
      "Bite",
      true,
      false,
      25,
      0,
      0,
      0,
      0,
      0,
      "monoTarget"
    ),
    Cheering: new Spell(
      117,
      0,
      0,
      0,
      "Cheering",
      false,
      false,
      0,
      0,
      0,
      0,
      2,
      2,
      "star",
      1,
      2
    ),
    Staff: new Spell(
      153,
      1,
      1,
      4,
      "Staff",
      true,
      true,
      20,
      0,
      0,
      0,
      0,
      0,
      "line",
      2,
      0
    ),
    "Heavy rain": new Spell(
      141,
      4,
      6,
      4,
      "Heavy rain",
      true,
      false,
      25,
      0,
      1,
      0,
      0,
      0,
      "star",
      2,
      0
    ),
    Gravity: new Spell(
      129,
      4,
      6,
      4,
      "Gravity",
      true,
      false,
      25,
      1,
      0,
      0,
      0,
      0,
      "star",
      2,
      0
    ),
  };

  /** Transforms a list of spell names in a string into an array of Spell objects. */
  static decodeSpellString = (spellStr: string) => {
    const spellArray: Spell[] = [];
    spellStr.split(", ").forEach((spellName) => {
      spellArray.push(this.spells[spellName]);
    });
    return spellArray;
  };
}
